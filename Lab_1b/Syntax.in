<seq_identifiers> ::= <identifier>|<array>|<identifier>,<seq_identifier>|<array>,<seq_identifier>
<declaration> ::= <type>space<seq_identifiers>;
<operation> ::= +|-|/|*|**|%
<expression_int> ::= <int>|<array_index>|<max>|<int><operation><expression_int>|<array_index><operation><expression_int>|<max><operation><expression_int>
<max> ::= max(<expression_int>,<expression_int>)
<expression_string> ::= <string>|<string>+<expression_string>
<array_index> ::= <identifier>[<u_int>]
<expression> ::= <expression_int>|<expression_string>
<assign_stmt> ::= <identifier>=<expression>;
<seq_read> ::= <identifier>|<array_index>|<identifier>,<seq_read>|<array_index>,<seq_read>
<read_stmt> ::= read(<seq_read>);
<seq_expression> ::= <expression>|<expression>,<seq_expression>
<seq_write> ::= <seq_read>|<seq_expression>
<write_stmt> ::= write(<seq_write>);
<io_stmt> ::= <read_stmt>|<write_stmt>
<exit_stmt> ::= exit(<int>);
<relation> ::= >|<|==|>=|<=
<condition> ::= <expression><relation><expression>
<elif_stmt> ::= elif(<condition>){<composed_stmt>}|elif(<condition>){<composed_stmt>}<elif_stmt>
<if_stmt> ::= if(<condition>){<composed_stmt>}|if(<condition>){<composed_stmt>}<elif_stmt>|if(<condition>){<composed_stmt>}else{<composed_stmt>}|if(<condition>){<composed_stmt>}<elif_stmt>else{<composed_stmt>}
<for_stmt> ::= for(<identifier>=<expression_int>;<identifier><relation><expression_int>;<identifier>=<expression_int>){<composed_stmt>}
<statemnt> ::= <declaration>|<assign_stmt>|<io_stmt>|<if_stmt>|<for_stmt>|<exit_stmt>
<composed_stmt> ::= <statemnt>|<statement><composed_stmt>
<program> ::= <composed_stmt>
